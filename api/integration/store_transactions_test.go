package integration_test

import (
	. "github.com/iotaledger/iota.go/api"
	. "github.com/iotaledger/iota.go/consts"
	. "github.com/iotaledger/iota.go/trinary"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/pkg/errors"
	"gopkg.in/h2non/gock.v1"
)

var _ = Describe("StoreTransactions()", func() {

	var api *API
	BeforeEach(func() {
		a, err := ComposeAPI(HttpClientSettings{}, nil)
		if err != nil {
			panic(err)
		}
		api = a
	})

	trytes
	Context("call", func() {
		It("resolves to correct response", func() {
			defer gock.Flush()
			gock.New(DefaultLocalIRIURI).
				Post("/").
				MatchType("json").
				JSON(StoreTransactionsCommand{
					Command: StoreTransactionsCmd,
					Trytes:  []Trytes{trytes},
				}).
				Reply(200)

			trytes2, err := api.StoreTransactions(trytes)
			Expect(err).ToNot(HaveOccurred())
			Expect(trytes2[0]).To(Equal(trytes))
		})
	})

	Context("invalid input", func() {
		It("returns an error for invalid trytes", func() {
			_, err := api.StoreTransactions("")
			Expect(errors.Cause(err)).To(Equal(ErrInvalidAttachedTrytes))
		})
	})

})
