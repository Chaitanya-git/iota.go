package pow

import (
	"github.com/iotaledger/giota/curl"
	"github.com/iotaledger/giota/transaction"
	"github.com/iotaledger/giota/trinary"
	"github.com/pkg/errors"

	"testing"
	"time"
)

var ErrInvalidMWM = errors.New("transaction hash does not fulfill MWM requirement")

type measurablePoWFunc func(trytes trinary.Trytes, mwm int, optRate chan int64) (trinary.Trytes, error)

func testPoW(t *testing.T, f measurablePoWFunc) float64 {
	var rawTx trinary.Trytes
	rate := make(chan int64, PowProcs)
	s := time.Now()
	nonce, err := f(rawTx, transaction.DefaultMinWeightMagnitude, rate)
	if err != nil {
		t.Fatal(err)
	}
	sumRate := <-rate
	ti := time.Now().Sub(s)

	rawTx = rawTx[:len(rawTx)-transaction.NonceTrinarySize/3] + nonce
	hash := curl.Hash(rawTx)
	if !hasReferenceMWMTrits(hash.Trits()) {
		t.Error(ErrInvalidMWM, hash)
	}
	return float64(sumRate) / 1000 / ti.Seconds()
}

var mwmTrits = []uint8{}
func init() {
	for i := 0; i < transaction.DefaultMinWeightMagnitude; i++ {
		mwmTrits = append(mwmTrits, 0)
	}
}

func hasReferenceMWMTrits(trits trinary.Trits) bool {
	for i := 0; i < len(mwmTrits); i++ {
		if uint8(trits[len(trits)-1-i]) != mwmTrits[i] {
			return false
		}
	}
	return true
}

func TestPowGo(t *testing.T) {
	sp := testPoW(t, powGo)
	t.Logf("%d kH/sec on Go PoW", int(sp))
}

func TestPowGo_1(t *testing.T) {
	if testing.Short() {
		t.Skip("skipping test in short mode.")
	}
	proc := PowProcs
	PowProcs = 1
	sp := testPoW(t, powGo)
	t.Logf("%d kH/sec on Go PoW", int(sp))
	PowProcs = proc
}
