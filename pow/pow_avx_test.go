// +build avx
// +build linux amd64
package pow

import (
	"github.com/iotaledger/giota/curl"
	"github.com/iotaledger/giota/transaction"
	"github.com/iotaledger/giota/trinary"
	"testing"
	"time"
)

func testPowAVX(t *testing.T) float64 {
	var txTrytes trinary.Trytes
	s := time.Now()
	nonce, err := PowAVX(txTrytes, 15)
	ti := time.Now().Sub(s)
	sp := float64(countAVX) / 1000 / ti.Seconds()
	if err != nil {
		t.Fatal(err)
	}
	txTrytes = txTrytes[:len(txTrytes)-transaction.NonceTrinarySize/3] + nonce
	h := curl.Hash(txTrytes)
	if h[len(h)-5:] != "99999" {
		t.Error("pow is illegal", h)
	}
	return sp
}

func TestPowAVX(t *testing.T) {
	sp := testPowAVX(t)
	t.Logf("%d kH/sec on AVX PoW", int(sp))
}

func TestPowAVX1(t *testing.T) {
	proc := PowProcs
	PowProcs = 1
	sp := testPowAVX(t)
	t.Logf("%d kH/sec on AVX PoW", int(sp))
	PowProcs = proc
}

func TestPowAVX32(t *testing.T) {
	proc := PowProcs
	PowProcs = 32
	sp := testPowAVX(t)
	t.Logf("%d kH/sec on AVX PoW", int(sp))
	PowProcs = proc
}

func TestPowAVX64(t *testing.T) {
	proc := PowProcs
	PowProcs = 64
	sp := testPowAVX(t)
	t.Logf("%d kH/sec on AVX PoW", int(sp))
	PowProcs = proc
}
